//===-- DelendumInstructionSelector.cpp -----------------------------*- C++ -*-===//
//===----------------------------------------------------------------------===//
/// \file
/// This file implements the targeting of the InstructionSelector class for
/// Delendum.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#include "DelendumRegisterBankInfo.h"
#include "DelendumSubtarget.h"
#include "DelendumTargetMachine.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelector.h"
#include "llvm/CodeGen/GlobalISel/InstructionSelectorImpl.h"
#include "llvm/Support/Debug.h"

#define DEBUG_TYPE "m68k-isel"

using namespace llvm;

#define GET_GLOBALISEL_PREDICATE_BITSET
#include "DelendumGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATE_BITSET

namespace {

class DelendumInstructionSelector : public InstructionSelector {
public:
  DelendumInstructionSelector(const DelendumTargetMachine &TM, 
                              const DelendumSubtarget &STI,
                              const DelendumRegisterBankInfo &RBI);

  bool select(MachineInstr &I) override;
  static const char *getName() { return DEBUG_TYPE; }

  InstructionSelector::ComplexRendererFns selectAddr(MachineOperand &Root) const;

private:
  bool selectImpl(MachineInstr &I, CodeGenCoverage &CoverageInfo) const;

  const DelendumTargetMachine &TM;
  const DelendumInstrInfo &TII;
  const DelendumRegisterInfo &TRI;
  const DelendumRegisterBankInfo &RBI;

#define GET_GLOBALISEL_PREDICATES_DECL
#include "DelendumGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_DECL

#define GET_GLOBALISEL_TEMPORARIES_DECL
#include "DelendumGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_DECL
};

} // end anonymous namespace

#define GET_GLOBALISEL_IMPL
#include "DelendumGenGlobalISel.inc"
#undef GET_GLOBALISEL_IMPL

DelendumInstructionSelector::DelendumInstructionSelector(
    const DelendumTargetMachine &TM, const DelendumSubtarget &STI,
    const DelendumRegisterBankInfo &RBI)
    : InstructionSelector(), TM(TM), TII(*STI.getInstrInfo()),
      TRI(*STI.getRegisterInfo()), RBI(RBI),

#define GET_GLOBALISEL_PREDICATES_INIT
#include "DelendumGenGlobalISel.inc"
#undef GET_GLOBALISEL_PREDICATES_INIT
#define GET_GLOBALISEL_TEMPORARIES_INIT
#include "DelendumGenGlobalISel.inc"
#undef GET_GLOBALISEL_TEMPORARIES_INIT
{
}

bool DelendumInstructionSelector::select(MachineInstr &I) {
  // Certain non-generic instructions also need some special handling.
  if (!isPreISelGenericOpcode(I.getOpcode()))
    return true;

  if (selectImpl(I, *CoverageInfo))
    return true;

  return false;
}
InstructionSelector::ComplexRendererFns
DelendumInstructionSelector::selectAddr(MachineOperand &Root) const {
  // TODO
}

namespace llvm {
InstructionSelector *
createDelendumInstructionSelector(const DelendumTargetMachine &TM,
                                  const DelendumSubtarget &Subtarget,
                                  const DelendumRegisterBankInfo &RBI) {
  return new DelendumInstructionSelector(TM, Subtarget, RBI);
}
} // end namespace llvm
