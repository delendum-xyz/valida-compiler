//===-- DelendumRegisterBankInfo.cpp --------------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file implements the targeting of the RegisterBankInfo class for Delendum.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#include "DelendumRegisterBankInfo.h"
#include "DelendumInstrInfo.h" // For the register classes
#include "DelendumSubtarget.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/RegisterBank.h"
#include "llvm/CodeGen/RegisterBankInfo.h"
#include "llvm/CodeGen/TargetRegisterInfo.h"

#define GET_REGINFO_ENUM
#include "DelendumGenRegisterInfo.inc"

#define GET_TARGET_REGBANK_IMPL
#include "DelendumGenRegisterBank.inc"

using namespace llvm;

namespace llvm {
namespace Delendum {

enum PartialMappingIdx {
  PMI_GPR,
  PMI_Min = PMI_GPR,
};

RegisterBankInfo::PartialMapping PartMappings[]{
    // GPR Partial Mapping
    {0, 32, I32RegBank},
};

enum ValueMappingIdx {
  InvalidIdx = 0,
  GPR3OpsIdx = 1,
};

RegisterBankInfo::ValueMapping ValueMappings[] = {
    // invalid
    {nullptr, 0},
    // 3 operands in GPRs
    {&PartMappings[PMI_GPR - PMI_Min], 1},
    {&PartMappings[PMI_GPR - PMI_Min], 1},
    {&PartMappings[PMI_GPR - PMI_Min], 1},

};

} // end namespace Delendum
} // end namespace llvm

DelendumRegisterBankInfo::DelendumRegisterBankInfo(const TargetRegisterInfo &TRI)
    : DelendumGenRegisterBankInfo() {}

const RegisterBank &
DelendumRegisterBankInfo::getRegBankFromRegClass(const TargetRegisterClass &RC,
                                                 LLT) const {
  return getRegBank(Delendum::I32RegBankID);
}

const RegisterBankInfo::InstructionMapping &
DelendumRegisterBankInfo::getInstrMapping(const MachineInstr &MI) const {
  auto Opc = MI.getOpcode();

  const InstructionMapping &Mapping = getInstrMappingImpl(MI);
  if (Mapping.isValid())
    return Mapping;

  using namespace TargetOpcode;

  unsigned NumOperands = MI.getNumOperands();
  const ValueMapping *OperandsMapping = &Delendum::ValueMappings[Delendum::GPR3OpsIdx];

  switch (Opc) {
  case G_ADD:
  case G_SUB:
  case G_MUL:
  case G_SDIV:
  case G_UDIV:
  case G_LOAD:
  case G_STORE: {
    OperandsMapping = &Delendum::ValueMappings[Delendum::GPR3OpsIdx];
    break;
  }

  case G_ICMP: {
    OperandsMapping =
        getOperandsMapping({&Delendum::ValueMappings[Delendum::GPR3OpsIdx],
                            nullptr,
                            &Delendum::ValueMappings[Delendum::GPR3OpsIdx],
                            &Delendum::ValueMappings[Delendum::GPR3OpsIdx]});
    break;
  }

  case G_BRCOND:
  case G_CONSTANT:
  case G_FRAME_INDEX:
    OperandsMapping =
        getOperandsMapping({&Delendum::ValueMappings[Delendum::GPR3OpsIdx],
                            nullptr});
    break;
  default:
    return getInvalidInstructionMapping();
  }

  return getInstructionMapping(DefaultMappingID, /*Cost=*/1, OperandsMapping,
                               NumOperands);
}
