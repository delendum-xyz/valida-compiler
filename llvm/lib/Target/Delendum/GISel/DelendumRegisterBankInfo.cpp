//===-- DelendumRegisterBankInfo.cpp --------------------------------*- C++ -*-===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
/// \file
/// This file implements the targeting of the RegisterBankInfo class for Delendum.
/// \todo This should be generated by TableGen.
//===----------------------------------------------------------------------===//

#include "DelendumRegisterBankInfo.h"
#include "DelendumInstrInfo.h" // For the register classes
#include "DelendumSubtarget.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/RegisterBank.h"
#include "llvm/CodeGen/RegisterBankInfo.h"
#include "llvm/CodeGen/TargetRegisterInfo.h"

#define GET_REGINFO_ENUM
#include "DelendumGenRegisterInfo.inc"

#define GET_TARGET_REGBANK_IMPL
#include "DelendumGenRegisterBank.inc"

using namespace llvm;

namespace llvm {
namespace Delendum {

enum PartialMappingIdx {};

RegisterBankInfo::PartialMapping PartMappings[]{};

enum ValueMappingIdx {};

RegisterBankInfo::ValueMapping ValueMappings[] = {};

} // end namespace Delendum
} // end namespace llvm

DelendumRegisterBankInfo::DelendumRegisterBankInfo(const TargetRegisterInfo &TRI)
    : DelendumGenRegisterBankInfo() {}

const RegisterBank &
DelendumRegisterBankInfo::getRegBankFromRegClass(const TargetRegisterClass &RC,
                                             LLT) const {
  return getRegBank(Delendum::I32RegBankID);
}

const RegisterBankInfo::InstructionMapping &
DelendumRegisterBankInfo::getInstrMapping(const MachineInstr &MI) const {
}
