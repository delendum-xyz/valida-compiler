//===-- DelendumISelDAGToDAG.cpp - A dag to dag inst selector for Delendum ------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
// This file defines an instruction selector for the Delendum target.
//
//===----------------------------------------------------------------------===//

#include "Delendum.h"

#include "DelendumMachineFunction.h"
#include "DelendumTargetMachine.h"
#include "DelendumRegisterInfo.h"

#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"
using namespace llvm;


#define DEBUG_TYPE "delendum-isel"
#define PASS_NAME "Delendum DAG->DAG Pattern Instruction Selection"

//===----------------------------------------------------------------------===//
// Instruction Selector Implementation
//===----------------------------------------------------------------------===//

//===--------------------------------------------------------------------===//
/// DelendumDAGToDAGISel - Delendum specific code to select Delendum machine
/// instructions for SelectionDAG operations.
///
namespace {
class DelendumDAGToDAGISel : public SelectionDAGISel {
  /// Subtarget - Keep a pointer to the Delendum Subtarget around so that we can
  /// make the right decision when generating code for different targets.
  const DelendumSubtarget *Subtarget = nullptr;
public:
  static char ID;

  DelendumDAGToDAGISel() = delete;

  explicit DelendumDAGToDAGISel(DelendumTargetMachine &tm) : SelectionDAGISel(ID, tm) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<DelendumSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  void Select(SDNode *N) override;

  // Complex Pattern Selectors.
  bool SelectADDRrr(SDValue N, SDValue &R1, SDValue &R2);
  bool SelectADDRri(SDValue N, SDValue &Base, SDValue &Offset);

  bool SelectAddr(SDNode *Parent, SDValue N, SDValue &Base, SDValue &Offset);

  /// SelectInlineAsmMemoryOperand - Implement addressing mode selection for
  /// inline asm expressions.
  bool SelectInlineAsmMemoryOperand(const SDValue &Op,
                                    unsigned ConstraintID,
                                    std::vector<SDValue> &OutOps) override;


private:
  SDNode* getGlobalBaseReg();
  bool tryInlineAsm(SDNode *N);

  // Include the pieces autogenerated from the target description.
#include "DelendumGenDAGISel.inc"
};
}  // end anonymous namespace

char DelendumDAGToDAGISel::ID = 0;

INITIALIZE_PASS(DelendumDAGToDAGISel, DEBUG_TYPE, PASS_NAME, false, false)

SDNode* DelendumDAGToDAGISel::getGlobalBaseReg() {
  // TODO
}

bool DelendumDAGToDAGISel::SelectADDRrr(SDValue N, SDValue &R1, SDValue &R2) {
  // TODO
}

bool DelendumDAGToDAGISel::SelectADDRri(SDValue N, SDValue &Base, SDValue &Offset) {
  // TODO
}

bool DelendumDAGToDAGISel::SelectAddr(SDNode *Parent, SDValue N, 
                                      SDValue &Base, SDValue &Offset) {
  // TODO
}

bool DelendumDAGToDAGISel::tryInlineAsm(SDNode *N){
  // TODO
}

void DelendumDAGToDAGISel::Select(SDNode *N) {
  // TODO
}


/// SelectInlineAsmMemoryOperand - Implement addressing mode selection for
/// inline asm expressions.
bool
DelendumDAGToDAGISel::SelectInlineAsmMemoryOperand(const SDValue &Op,
                                                   unsigned ConstraintID,
                                                   std::vector<SDValue> &OutOps) {
  SDValue Op0, Op1;
  switch (ConstraintID) {
  default: return true;
  case InlineAsm::Constraint_o:
  case InlineAsm::Constraint_m: // memory
   if (!SelectADDRrr(Op, Op0, Op1))
     SelectADDRri(Op, Op0, Op1);
   break;
  }

  OutOps.push_back(Op0);
  OutOps.push_back(Op1);
  return false;
}

/// createDelendumISelDag - This pass converts a legalized DAG into a
/// Delendum-specific DAG, ready for instruction scheduling.
///
FunctionPass *llvm::createDelendumISelDag(DelendumTargetMachine &TM) {
  return new DelendumDAGToDAGISel(TM);
}
